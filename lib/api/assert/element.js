// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var assert, cache$, getElement, getElementWithoutError, getProperty, isRegExp, isString, isTextOrRegexp;
  assert = require('assertive');
  getElementWithoutError = require('../safeElement');
  cache$ = require('underscore');
  isString = cache$.isString;
  isRegExp = cache$.isRegExp;
  isTextOrRegexp = function (textOrRegExp) {
    return isString(textOrRegExp) || isRegExp(textOrRegExp);
  };
  getElement = function (driver, selector) {
    var count, element, elements;
    elements = driver.getElements(selector);
    count = elements.length;
    if (count === 0)
      throw new Error('Element not found for selector: ' + selector);
    if (!(count === 1))
      throw new Error('assertion needs a unique selector!\n' + selector + ' has ' + count + ' hits in the page');
    return element = elements[0];
  };
  getProperty = function (driver, selector, property) {
    var element;
    element = getElement(driver, selector);
    return [
      element,
      element.get(property)
    ];
  };
  module.exports = function (driver) {
    return {
      elementHasAttributes: function (selector, attributesObject) {
        var actualVal, attrDoc, attribute, cache$1, doc, element, val;
        if (arguments.length === 3) {
          cache$1 = arguments;
          doc = cache$1[0];
          selector = cache$1[1];
          attributesObject = cache$1[2];
          assert.hasType('elementHasAttributes(docstring, selector, attributesObject) - requires String docstring', String, doc);
        } else {
          doc = 'elementHasAttributes - selector:' + selector + '\nattributesObject:' + JSON.stringify(attributesObject);
        }
        assert.hasType('elementHasAttributes(selector, attributesObject) - requires String selector', String, selector);
        assert.hasType('elementHasAttributes(selector, attributesObject) - requires Object attributesObject', Object, attributesObject);
        element = getElement(driver, selector);
        for (attribute in attributesObject) {
          val = attributesObject[attribute];
          actualVal = element.get(attribute);
          attrDoc = '' + doc + '\nattribute "' + attribute + '" was expected to have "' + val + '", but was "' + actualVal + '".';
          if (isString(val)) {
            assert.equal(attrDoc, val, actualVal);
          } else {
            assert.hasType('elementHasAttributes(selector, attributesObject) - attributesObject requires String or RegExp value', RegExp, val);
            assert.match(attrDoc, val, actualVal);
          }
        }
        return element;
      },
      elementHasText: function (selector, textOrRegExp) {
        var actualText, cache$1, cache$2, doc, element;
        if (arguments.length === 3) {
          cache$1 = arguments;
          doc = cache$1[0];
          selector = cache$1[1];
          textOrRegExp = cache$1[2];
          assert.truthy('elementHasText(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
        } else {
          doc = 'elementHasText: ' + selector;
        }
        assert.truthy('elementHasText(selector, textOrRegExp) - requires selector', isString(selector));
        assert.truthy('elementHasText(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
        cache$2 = getProperty(driver, selector, 'text');
        element = cache$2[0];
        actualText = cache$2[1];
        if (textOrRegExp === '') {
          assert.equal(textOrRegExp, actualText);
        } else {
          assert.include(doc, textOrRegExp, actualText);
        }
        return element;
      },
      elementLacksText: function (selector, textOrRegExp) {
        var actualText, cache$1, cache$2, doc, element;
        if (arguments.length === 3) {
          cache$1 = arguments;
          doc = cache$1[0];
          selector = cache$1[1];
          textOrRegExp = cache$1[2];
          assert.truthy('elementLacksText(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
        } else {
          doc = 'elementLacksText: ' + selector;
        }
        assert.truthy('elementLacksText(selector, textOrRegExp) - requires selector', isString(selector));
        assert.truthy('elementLacksText(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
        cache$2 = getProperty(driver, selector, 'text');
        element = cache$2[0];
        actualText = cache$2[1];
        assert.notInclude(doc, textOrRegExp, actualText);
        return element;
      },
      elementHasValue: function (selector, textOrRegExp) {
        var actualValue, cache$1, cache$2, doc, element;
        if (arguments.length === 3) {
          cache$1 = arguments;
          doc = cache$1[0];
          selector = cache$1[1];
          textOrRegExp = cache$1[2];
          assert.truthy('elementHasValue(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
        } else {
          doc = 'elementHasValue: ' + selector;
        }
        assert.truthy('elementHasValue(selector, textOrRegExp) - requires selector', isString(selector));
        assert.truthy('elementHasValue(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
        cache$2 = getProperty(driver, selector, 'value');
        element = cache$2[0];
        actualValue = cache$2[1];
        if (textOrRegExp === '') {
          assert.equal(textOrRegExp, actualValue);
        } else {
          assert.include(doc, textOrRegExp, actualValue);
        }
        return element;
      },
      elementLacksValue: function (selector, textOrRegExp) {
        var actualValue, cache$1, cache$2, doc, element;
        if (arguments.length === 3) {
          cache$1 = arguments;
          doc = cache$1[0];
          selector = cache$1[1];
          textOrRegExp = cache$1[2];
          assert.truthy('elementLacksValue(docstring, selector, textOrRegExp) - requires docstring', isString(doc));
        } else {
          doc = 'elementLacksValue: ' + selector;
        }
        assert.truthy('elementLacksValue(selector, textOrRegExp) - requires selector', isString(selector));
        assert.truthy('elementLacksValue(selector, textOrRegExp) - requires textOrRegExp', isTextOrRegexp(textOrRegExp));
        cache$2 = getProperty(driver, selector, 'value');
        element = cache$2[0];
        actualValue = cache$2[1];
        assert.notInclude(doc, textOrRegExp, actualValue);
        return element;
      },
      elementIsVisible: function (selector) {
        var element;
        assert.hasType('elementIsVisible(selector) - requires (String) selector', String, selector);
        element = getElementWithoutError(driver, selector);
        assert.truthy('Element not found for selector: ' + selector, element);
        assert.truthy('Element should be visible for selector: ' + selector, element.isVisible());
        return element;
      },
      elementNotVisible: function (selector) {
        var element;
        assert.hasType('elementNotVisible(selector) - requires (String) selector', String, selector);
        element = getElementWithoutError(driver, selector);
        assert.truthy('Element not found for selector: ' + selector, element);
        assert.falsey('Element should not be visible for selector: ' + selector, element.isVisible());
        return element;
      },
      elementExists: function (selector) {
        var element;
        assert.hasType('elementExists(selector) - requires (String) selector', String, selector);
        element = getElementWithoutError(driver, selector);
        assert.truthy('Element not found for selector: ' + selector, element);
        return element;
      },
      elementDoesntExist: function (selector) {
        var element;
        assert.hasType('elementDoesntExist(selector) - requires (String) selector', String, selector);
        element = getElementWithoutError(driver, selector);
        return assert.falsey('Element found for selector: ' + selector, element);
      }
    };
  };
}.call(this);
