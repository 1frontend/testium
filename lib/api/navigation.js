// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, hasType, isObject, makeUrlRegExp, omit, qs, urlParse, waitFor;
  qs = require('querystring');
  waitFor = require('./wait');
  urlParse = require('url').parse;
  makeUrlRegExp = require('./makeUrlRegExp');
  cache$ = require('underscore');
  isObject = cache$.isObject;
  omit = cache$.omit;
  hasType = require('assertive').hasType;
  module.exports = function (driver) {
    return {
      navigateTo: function (url, options) {
        var currentUrl, hasProtocol, query, sep;
        hasType('navigateTo(url) - requires (String) url', String, url);
        query = null != options ? options.query : void 0;
        if (null != query) {
          options = omit(options, 'query');
          hasType('navigateTo(url, {query}) - query must be an Object, if provided', Object, query);
          sep = /\?/.test(url) ? '&' : '?';
          url += sep + qs.encode(query);
        }
        if (null != options)
          options;
        else
          options = {};
        options.url = url;
        hasProtocol = /^[^:\/?#]+:\/\//;
        if (!hasProtocol.test(url))
          url = '' + this.urlRoot + url;
        driver.http.post('' + this.proxyCommandRoot + '/new-page', options);
        currentUrl = driver.getUrl();
        if (currentUrl === url) {
          driver.refresh();
        } else {
          driver.navigateTo(url);
        }
        return driver.rootWindow = driver.getCurrentWindowHandle();
      },
      refresh: function () {
        return driver.refresh();
      },
      getUrl: function () {
        return driver.getUrl();
      },
      getPath: function () {
        var url;
        url = driver.getUrl();
        return urlParse(url).path;
      },
      waitForUrl: function (url, query, timeout) {
        if (typeof query === 'number') {
          timeout = query;
        } else if (isObject(query)) {
          url = makeUrlRegExp(url, query);
        }
        return waitFor(url, 'Url', function () {
          return driver.getUrl();
        }, null != timeout ? timeout : 5e3);
      },
      waitForPath: function (url, timeout) {
        if (null == timeout)
          timeout = 5e3;
        return waitFor(url, 'Path', function (this$) {
          return function () {
            return this$.getPath();
          };
        }(this), timeout);
      }
    };
  };
}.call(this);
