// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, hasType, truthy;
  cache$ = require('assertive');
  truthy = cache$.truthy;
  hasType = cache$.hasType;
  module.exports = function (driver) {
    var setValue;
    setValue = function (selector, keys) {
      var element;
      keys = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
      element = driver.getElement(selector);
      truthy('Element not found at selector: ' + selector, element);
      element.clear();
      return element.type.apply(element, [].slice.call(keys).concat());
    };
    return {
      type: function (selector, keys) {
        var element;
        keys = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
        hasType('type(selector, keys...) - requires (String) selector', String, selector);
        truthy('type(selector, keys...) - requires keys', keys.length > 0);
        element = driver.getElement(selector);
        truthy('Element not found at selector: ' + selector, element);
        return element.type.apply(element, [].slice.call(keys).concat());
      },
      setValue: function (selector, keys) {
        keys = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
        hasType('setValue(selector, keys...) - requires (String) selector', String, selector);
        truthy('setValue(selector, keys...) - requires keys', keys.length > 0);
        return setValue.apply(null, [selector].concat([].slice.call(keys)));
      },
      clear: function (selector) {
        var element;
        hasType('clear(selector) - requires (String) selector', String, selector);
        element = driver.getElement(selector);
        truthy('Element not found at selector: ' + selector, element);
        return element.clear();
      },
      clearAndType: function (selector, keys) {
        keys = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
        hasType('clearAndType(selector, keys...) - requires (String) selector', String, selector);
        truthy('clearAndType(selector, keys...) - requires keys', keys.length > 0);
        return setValue.apply(null, [selector].concat([].slice.call(keys)));
      }
    };
  };
}.call(this);
