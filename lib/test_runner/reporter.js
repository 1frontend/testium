// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var Base, color, cursor, getBrowser, takeScreenshotOnFailure;
  Base = require('mocha').reporters.Base;
  cursor = Base.cursor;
  color = Base.color;
  getBrowser = require('../index').getBrowser;
  takeScreenshotOnFailure = require('../test_setup/screenshot').takeScreenshotOnFailure;
  module.exports = function (screenshotDirectory) {
    var Spec;
    Spec = function (runner) {
      var indent, indents, n, self, stats;
      Base.call(this, runner);
      self = this;
      stats = this.stats;
      indents = 0;
      n = 0;
      indent = function () {
        return Array(indents).join('  ');
      };
      runner.on('start', function () {
        return console.log();
      });
      runner.on('suite', function (suite) {
        ++indents;
        return console.log(color('suite', '%s%s'), indent(), suite.title);
      });
      runner.on('suite end', function (suite) {
        --indents;
        if (1 === indents)
          return console.log();
      });
      runner.on('pending', function (test) {
        var fmt;
        fmt = indent() + color('pending', '  - %s');
        return console.log(fmt, test.title);
      });
      runner.on('pass', function (test) {
        var fmt;
        if ('fast' === test.speed) {
          fmt = indent() + color('checkmark', '  ' + Base.symbols.ok) + color('pass', ' %s ');
          cursor.CR();
          return console.log(fmt, test.title);
        } else {
          fmt = indent() + color('checkmark', '  ' + Base.symbols.ok) + color('pass', ' %s ') + color(test.speed, '(%dms)');
          cursor.CR();
          return console.log(fmt, test.title, test.duration);
        }
      });
      runner.on('fail', function (test, err) {
        var browser;
        browser = getBrowser();
        takeScreenshotOnFailure(screenshotDirectory, test, browser);
        cursor.CR();
        return console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
      });
      return runner.on('end', self.epilogue.bind(self));
    };
    Spec.prototype.__proto__ = Base.prototype;
    return Spec;
  };
}.call(this);
