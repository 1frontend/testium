// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, flatten, getFilesForPattern, getPathsForDirectory, getPatternType, glob, isArray, join, readr, resolvePaths, statSync;
  glob = require('glob');
  readr = require('readr');
  cache$ = require('underscore');
  isArray = cache$.isArray;
  flatten = cache$.flatten;
  join = require('path').join;
  statSync = require('fs').statSync;
  module.exports.findAll = function (patterns, appDirectory) {
    if (!patterns)
      return;
    if (!isArray(patterns))
      patterns = [patterns];
    patterns = resolvePaths(patterns, appDirectory);
    return flatten(patterns.map(getFilesForPattern));
  };
  getFilesForPattern = function (pattern) {
    var patternType;
    patternType = getPatternType(pattern);
    if (patternType === 'file') {
      return [pattern];
    } else if (patternType === 'directory') {
      return getPathsForDirectory(pattern);
    } else {
      return glob.sync(pattern);
    }
  };
  getPathsForDirectory = function (directory) {
    return readr.getPathsSync(directory, { extension: '{js,coffee}' }).map(function (metadata) {
      return metadata.path;
    });
  };
  resolvePaths = function (paths, appDirectory) {
    return paths.map(function (path) {
      if (path[0] === '/') {
        return path;
      } else {
        return join(appDirectory, path);
      }
    });
  };
  getPatternType = function (pattern) {
    var stats;
    try {
      stats = statSync(pattern);
    } catch (e$) {
      return 'glob';
    }
    if (stats.isFile())
      return 'file';
    if (stats.isDirectory())
      return 'directory';
    return 'glob';
  };
}.call(this);
