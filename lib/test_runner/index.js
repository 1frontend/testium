// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var BROWSERS, cache$, compact, extend, files, Mocha, passValuesToTestiumBeforeTestFiles, path, Reporter, store, validateBrowser;
  Mocha = require('mocha');
  path = require('path');
  store = require('../test_setup/store');
  files = require('./files');
  Reporter = require('./reporter');
  cache$ = require('underscore');
  compact = cache$.compact;
  extend = cache$.extend;
  require('coffee-script-redux/register');
  BROWSERS = [
    'phantomjs',
    'chrome',
    'firefox',
    'htmlunit',
    'internet explorer',
    'iphone'
  ];
  passValuesToTestiumBeforeTestFiles = function (options) {
    return store.set({
      logDirectory: options.logDirectory,
      http: options.http,
      browser: options.browser,
      screenshotDirectory: options.screenshotDirectory,
      seleniumServer: options.seleniumServer
    });
  };
  validateBrowser = function (browser) {
    if (null == browser)
      browser = 'phantomjs';
    if (in$(browser, BROWSERS))
      return;
    throw new Error('Browser not supported by Testium: ' + browser);
  };
  process.on('message', function (options) {
    var allTestFiles, appDirectory, beforeTestFiles, beforeTests, cache$1, mochaOptions, runMocha, testFiles, testiumBeforeTestFiles, tests;
    validateBrowser(options.browser);
    passValuesToTestiumBeforeTestFiles(options);
    cache$1 = options;
    tests = cache$1.tests;
    beforeTests = cache$1.beforeTests;
    mochaOptions = cache$1.mochaOptions;
    appDirectory = cache$1.appDirectory;
    if (null != mochaOptions)
      mochaOptions;
    else
      mochaOptions = {};
    if (!(null != tests)) {
      console.error('Must specify tests to run!');
      process.exit(-1);
    }
    runMocha = function (testFiles) {
      var defaults, mocha;
      defaults = {
        reporter: Reporter(options.screenshotDirectory),
        timeout: 2e4,
        slow: 2e3
      };
      options = extend({}, defaults, mochaOptions);
      mocha = new Mocha(options);
      testFiles.forEach(function (file) {
        return mocha.addFile(file);
      });
      return mocha.run(function (failures) {
        return global.exitMocha(function () {
          return process.exit(failures);
        });
      });
    };
    testiumBeforeTestFiles = ['' + __dirname + '/../test_setup/index.js'];
    beforeTestFiles = files.findAll(beforeTests, appDirectory);
    testFiles = files.findAll(tests, appDirectory);
    allTestFiles = compact(testiumBeforeTestFiles.concat(beforeTestFiles).concat(testFiles));
    return runMocha(allTestFiles);
  });
  function in$(member, list) {
    for (var i = 0, length = list.length; i < length; ++i)
      if (i in list && list[i] === member)
        return true;
    return false;
  }
}.call(this);
