// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var createSeleniumArguments, path, port, SELENIUM_PORT, SELENIUM_TIMEOUT, spawn, spawnProcess;
  SELENIUM_PORT = 4444;
  SELENIUM_TIMEOUT = 9e4;
  path = require('path');
  spawn = require('./spawn');
  port = require('./port');
  createSeleniumArguments = function () {
    var chromeArgs, chromeDriverPath, firefoxProfilePath;
    chromeDriverPath = path.join(__dirname, '../../../bin/chromedriver');
    chromeArgs = [
      '--disable-application-cache',
      '--media-cache-size=1',
      '--disk-cache-size=1',
      '--disk-cache-dir=/dev/null',
      '--disable-cache',
      '--disable-desktop-notifications'
    ].join(' ');
    firefoxProfilePath = path.join(__dirname, './firefox_profile.js');
    return [
      '-Dwebdriver.chrome.driver=' + chromeDriverPath,
      '-Dwebdriver.chrome.args="' + chromeArgs + '"',
      '-firefoxProfileTemplate',
      firefoxProfilePath,
      '-ensureCleanSession',
      '-debug'
    ];
  };
  spawnProcess = function (logStream, javaHeapSize) {
    var args, jarPath, javaHeapArg;
    jarPath = path.join(__dirname, '../../../bin/selenium.jar');
    javaHeapArg = '-Xmx' + javaHeapSize + 'm';
    args = [
      javaHeapArg,
      '-jar',
      jarPath
    ].concat(createSeleniumArguments());
    return spawn('java', args, 'selenium', logStream);
  };
  module.exports = function (logStream, javaHeapSize) {
    if (null == javaHeapSize)
      javaHeapSize = 256;
    return function (parallelCallback) {
      var callback;
      callback = function (error, process) {
        return parallelCallback(null, {
          error: error,
          process: process
        });
      };
      logStream.log('Starting selenium');
      return port.isAvailable(SELENIUM_PORT, function (error, isAvailable) {
        var seleniumProcess;
        if (null != error)
          return callback(error);
        if (!isAvailable)
          return callback(new Error('Port ' + SELENIUM_PORT + ' (requested by selenium) is already in use.'));
        seleniumProcess = spawnProcess(logStream, javaHeapSize);
        logStream.log('waiting for selenium to listen on port ' + SELENIUM_PORT);
        return port.waitFor(seleniumProcess, SELENIUM_PORT, SELENIUM_TIMEOUT, function (error, timedOut) {
          if (null != error)
            return callback(error);
          if (timedOut)
            return callback(new Error('Timeout occurred waiting for selenium to be ready on port ' + SELENIUM_PORT + '. Check the log at: ' + logStream.path));
          logStream.log('selenium is ready!');
          return callback(null, seleniumProcess);
        });
      });
    };
  };
}.call(this);
