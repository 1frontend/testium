// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, cache$, cleanupChrome, cleanupPhantomJS, existsSync, killProcess, logError, unlinkSync;
  async = require('async');
  logError = require('../log/error');
  cache$ = require('fs');
  unlinkSync = cache$.unlinkSync;
  existsSync = cache$.existsSync;
  module.exports = function (seleniumProcess, proxyProcess, callback) {
    cleanupChrome();
    cleanupPhantomJS();
    return async.parallel([
      function (taskDone) {
        return killProcess('selenium', seleniumProcess, taskDone);
      },
      function (taskDone) {
        return killProcess('proxy', proxyProcess, taskDone);
      }
    ], callback);
  };
  cleanupChrome = function () {
    var error, file;
    file = '' + __dirname + '/../../libpeerconnection.log';
    try {
      if (existsSync(file))
        return unlinkSync(file);
    } catch (e$) {
      error = e$;
      return logError(error);
    }
  };
  cleanupPhantomJS = function () {
    var error, file;
    file = '' + __dirname + '/../../phantomjsdriver.log';
    try {
      if (existsSync(file))
        return unlinkSync(file);
    } catch (e$) {
      error = e$;
      return logError(error);
    }
  };
  killProcess = function (name, proc, callback) {
    var error, exited;
    if (!(null != proc))
      return callback();
    if (proc.killed)
      return callback();
    error = null;
    exited = false;
    proc.on('error', function (err) {
      return error = err;
    });
    proc.on('exit', function () {
      exited = true;
      return callback(error);
    });
    proc.kill('SIGKILL');
    return setTimeout(function () {
      if (!exited)
        return callback(new Error('[testium] failed to cleanup ' + name + ' (pid=' + proc.pid + ') process; check the ' + name + '.log.'));
    }, 2e3);
  };
}.call(this);
